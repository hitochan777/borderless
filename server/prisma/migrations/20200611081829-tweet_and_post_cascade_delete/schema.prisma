datasource development {
  provider = "postgres"
  url = "***"
}

generator photon {
  provider = "prisma-client-js"
}

model Repliable {
  id String @default(cuid()) @id
  tweet Tweet @relation("tweet_repliable")
  tweetInReplyTo Tweet @relation("tweet_in_reply_to")
}

model Like {
  id String @default(cuid()) @id
  user User @relation(fields: [userId], references: [id])
  userId String
  repliable Repliable @relation(fields: [repliableId], references: [id])
  repliableId String
  createdAt DateTime  @default(now())
  
  @@unique([repliableId, userId], name: "Like_user_repliable_unique_constraint")
}

model User {
  id                String  @default(cuid()) @id
  email             String  @unique
  username          String  @unique
  fluentLanguages   String?
  learningLanguages String?
  timezone  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Post {
  id        String  @default(cuid()) @id
  repliable Repliable @relation(fields: [id], references: [id])
  published Boolean
  language  String
  content   String
  user User @relation(fields: [userId], references: [id])
  userId String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Tweet {
  id        String  @default(cuid()) @id
  repliable Repliable @relation("tweet_repliable", fields: [id], references: [id])
  content   String
  correction String?
  inReplyTo Repliable? @relation("tweet_in_reply_to", fields: [inReplyToId], references: [id])
  inReplyToId String?
  user User @relation(fields: [userId], references: [id])
  userId String
  post Post @relation(fields: [postId], references: [id])
  postId String
  correctionGroup CorrectionGroup? @relation(name: "CorrectionGroupTweet", fields: [correctionGroupId], references: [id])
  correctionGroupId String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model CorrectionGroup {
  id        String  @default(cuid()) @id
  user User @relation(fields: [userId], references: [id])
  userId String
  post Post @relation(fields: [postId], references: [id])
  postId String
  summaryComment Tweet? @relation(fields: [summaryCommentId], references: [id])
  summaryCommentId String? 
  corrections Tweet[] @relation("CorrectionGroupTweet")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model LineMarker {
  id        String  @default(cuid()) @id
  post Post @relation(fields: [postId], references: [id])
  postId String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

