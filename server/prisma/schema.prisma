generator photon {
  provider = "prisma-client-js"
}

datasource development {
  provider = "postgresql"
  url      = env("DB_URL")
}

model CorrectionGroup {
  createdAt                                      DateTime @default(now())
  id                                             String   @id
  postId                                         String
  summaryCommentId                               String?
  updatedAt                                      DateTime
  userId                                         String
  Post                                           Post     @relation(fields: [postId], references: [id])
  Tweet_CorrectionGroup_summaryCommentIdToTweet  Tweet?   @relation("CorrectionGroup_summaryCommentIdToTweet", fields: [summaryCommentId], references: [id])
  User                                           User     @relation(fields: [userId], references: [id])
  Tweet_CorrectionGroupToTweet_correctionGroupId Tweet[]  @relation("CorrectionGroupToTweet_correctionGroupId")
}

model Like {
  createdAt   DateTime  @default(now())
  id          String    @id
  repliableId String
  userId      String
  Repliable   Repliable @relation(fields: [repliableId], references: [id])
  User        User      @relation(fields: [userId], references: [id])

  @@unique([repliableId, userId], name: "Like_user_repliable_unique_constraint")
}

model LineMarker {
  createdAt DateTime @default(now())
  id        String   @id
  postId    String
  updatedAt DateTime
  Post      Post     @relation(fields: [postId], references: [id])
}

model Post {
  content         String
  createdAt       DateTime          @default(now())
  id              String            @id
  language        String
  published       Boolean
  updatedAt       DateTime
  userId          String
  User            User              @relation(fields: [userId], references: [id])
  CorrectionGroup CorrectionGroup[]
  LineMarker      LineMarker[]
  Tweet           Tweet[]
}

model Repliable {
  id    String  @id
  Like  Like[]
  Tweet Tweet[]
}

model Tweet {
  content                                                  String
  correction                                               String?
  correctionGroupId                                        String?
  createdAt                                                DateTime          @default(now())
  id                                                       String            @id
  inReplyToId                                              String
  postId                                                   String
  updatedAt                                                DateTime
  userId                                                   String
  CorrectionGroup_CorrectionGroupToTweet_correctionGroupId CorrectionGroup?  @relation("CorrectionGroupToTweet_correctionGroupId", fields: [correctionGroupId], references: [id])
  Repliable                                                Repliable         @relation(fields: [inReplyToId], references: [id])
  Post                                                     Post              @relation(fields: [postId], references: [id])
  User                                                     User              @relation(fields: [userId], references: [id])
  CorrectionGroup_CorrectionGroup_summaryCommentIdToTweet  CorrectionGroup[] @relation("CorrectionGroup_summaryCommentIdToTweet")
}

model User {
  createdAt         DateTime          @default(now())
  email             String            @unique
  fluentLanguages   String?
  id                String            @id
  learningLanguages String?
  timezone          String
  updatedAt         DateTime
  username          String            @unique
  CorrectionGroup   CorrectionGroup[]
  Like              Like[]
  Post              Post[]
  Tweet             Tweet[]
}